print(result);
}
if(y == "stats"){
result<-summary(x)
print(result)
}
if(y == "NA_summary"){
return(which(is.na(x)))
}
if(y == "check_skew"){
res <- which(is.na(x))
return(res)
}
}
source('C:/Users/manoj kumar/Desktop/training/R programming/first_ques.R')
source(func(funct()))
source(func
source(func)
source(func,even)
x=as.numeric("last_but_one")
source('C:/Users/manoj kumar/Desktop/training/R programming/lastbuone.R')
skewness(duration)
res <- which(is.na(x))
source(first_ques.R)
source(funct
source(funct)
N <- as.numeric("check_skew")
source('C:/Users/manoj kumar/Desktop/training/R programming/skew.R')
funct <- function(x = numeric(), y){
even <- as.numeric();
if(y == "even_series"){
for (i in y) {
if (i %% 2 == 0){
even <- append(even,i)
}
}
print(even);
}
if( y=="last_but_one"){
result <- x[1: length(x)-1]
print(result);
}
if(y == "stats"){
result<-summary(x)
print(result)
}
if(y == "NA_summary"){
return(which(is.na(x)))
}
if(y == "check_skew"){
res <- which(is.na(x))
return(res)
}
}
funct(c(2,7,8,6))
funct(c(2,7,8,6),"even_series")
even <- numeric();
result <- x[1: length(x)-1]
print(result);
source('C:/Users/manoj kumar/Desktop/training/R programming/first_ques.R')
if( y=="last_but_one"){
result <- x[1: length(x)-1]
print(result);
}
even <- numeric();
funct(c(2,7,8,6),"even_series")
funct(c(2,7,8,6),"stats")
funct(c(2,7,8,6),"last_but_one")
funct(c(2,7,8,6),"NA_summary")
funct(c(2,7,8,6),"check_skew")
for (i in x) {
if (i %% 2 == 0){
even <- append(even,i)
}
}
print(even);
funct(c(2,7,8,6),"even_series")
even <- append(x,i)
funct(c(2,7,8,6),"even_series")
even <- append(y,i)
funct(c(2,7,8,6),"even_series")
even <- append(x,i)
funct(c(2,7,8,6),"even_series")
funct <- function(x = numeric(), y){
even <- numeric();
if(y == "even_series"){
for (i in x) {
x[seq(2, length(x), 2)]
}
return(x)
}
if( y=="last_but_one"){
result <- x[1: length(x)-1]
print(result)
}
if(y == "stats"){
result<-summary(x)
print(result)
}
if(y == "NA_summary"){
return(which(is.na(x)))
}
if(y == "check_skew"){
yes <- which(is.na(x))
return(yes)
}
}
funct(c(2,7,8,6),"even_series")
if (i %% 2 == 0){
even <- append(x,i)
}
even <- append(even,i)
funct <- function(x = numeric(), y){
even <- numeric();
if(y == "even_series"){
for (i in x) {
if (i %% 2 == 0){
even <- append(even,i)
}
}
print(even);
}
if( y=="last_but_one"){
result <- x[1: length(x)-1]
print(result);
}
if(y == "stats"){
result<-summary(x)
print(result)
}
if(y == "NA_summary"){
return(which(is.na(x)))
}
if(y == "check_skew"){
yes <- which(is.na(x))
return(yes)
}
}
funct(c(2,7,8,6),"even_series")
skewness(duration)
duration = x
source('C:/Users/manoj kumar/Desktop/training/R programming/first_ques.R')
return(which(is.na(x)))
return(x)
}
if(y == "even_series"){
for (i in x) {
x[seq(2, length(x), 2)]
}
}
source('C:/Users/manoj kumar/Desktop/training/R programming/element.R')
if( y=="last_but_one"){
result <- x[1: length(x)-1]
print(result)
}
funct(c(2,7,8,6),"even_series")
return(yes)
{
print("left skewed")
}
if([x]>[y]){
print("right skewed")
}
}
funct <- function(x = numeric(), y){
even <- numeric();
if(y == "even_series"){
for (i in x) {
if (i %% 2 == 0){
even <- append(even,i)
}
}
print(even);
}
if( y=="last_but_one"){
result <- x[1: length(x)-1]
print(result);
}
if(y == "stats"){
result<-summary(x)
print(result)
}
if(y == "NA_summary"){
return(which(is.na(x)))
}
}
music<-function(){
a<-c("One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten")
print("Here we go!")
for(i in 10:1) {
if(!i==1){
cat("There were", a[i] ," in the bed\n
and the little one said,\n
"Roll over, roll over."\n
So they all rolled over and one fell out.\n")
}
else{
cat("There was", a[i] ,"in the bed\n
and the little one said,\n
'I'm lonely.[sigh].'")
}
}
}
source('C:/Users/manoj kumar/Desktop/training/music.R')
source('C:/Users/manoj kumar/Desktop/training/music.R')
cat("There was", a[i] ,"in the bed\n
and the little one said,\n
'I'm lonely.[sigh].'")
else{
cat("There was", a[i] ,"in the bed\n
and the little one said,\n
'I'm lonely.[sigh].'")
}
source('C:/Users/manoj kumar/Desktop/training/music.R')
lapply(nycflights13::flights,typeof)
music<-function(){
a<-c("One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten")
print("Here we go!")
for(i in 10:1) {
if(!i==1){
cat("There were", a[i] ," in the bed\n
and the little one said,\n
"Roll over, roll over."\n
So they all rolled over and one fell out.\n")
}
else{
cat("There was", a[i] ,"in the bed\n
and the little one said,\n
'I'm lonely.[sigh].'")
}
}
}
music<-function(){
a<-c("One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten")
print("Here we go!")
for(i in 10:1) {
if(!i==1){
cat("There were", a[i] ," in the bed\n
and the little one said,\n
“Roll over, roll over.”\n
So they all rolled over and one fell out.\n")
}
else{
cat("There was", a[i] ,"in the bed\n
and the little one said,\n
'I’m lonely…[sigh].'")
}
}
}
source('C:/Users/manoj kumar/Desktop/training/music.R')
even <- append(even,i)
funct(c(2,7,8,6),"even_series")
funct(c(2,7,8,6,NA),"even_series")
funct(c(2,7,8,6),"even_series")
funct(c(3,518,9,2),"even_series")
else {
cat("Roll over, roll over.\n")
cat("So they all rolled over and one fell out.\n")
}
source('C:/Users/manoj kumar/Desktop/training/R programming/rhymes.R')
cat(""Roll over, roll over."\n")
source('C:/Users/manoj kumar/Desktop/training/R programming/rhymes.R')
cat("Roll over, roll over.\n")
source('C:/Users/manoj kumar/Desktop/training/R programming/rhymes.R')
cat("Roll over, roll over.\n")
source('C:/Users/manoj kumar/Desktop/training/R programming/rhymes.R')
source('C:/Users/manoj kumar/Desktop/training/R programming/rhymes.R')
swirl()
head(airquality)
xyplot(ozone$Wind,data = airquality)
xyplot(Ozone$Wind,data = airquality)
xyplot(Ozone~Wind,data = airquality)
xyplot(Ozone~Wind,data = airquality,col="red",pch=8,main = "Big Apple Data"
xyplot(Ozone~Wind,data = airquality,col="red",pch=8,main = "Big Apple Data")
xyplot(Ozone~Wind,data = airquality,pch=8,col="red",main = "Big Apple Data")
xyplot(Ozone~Wind,data = airquality,layout = c(5,1)
xyplot(Ozone~Wind,data = airquality,layout = c(5,1))
xyplot(Ozone~Wind | as.factor(Month),data = airquality,layout = c(5,1))
xyplot(Ozone~Wind | Month,data = airquality,layout = c(5,1))
p<-xyplot(Ozone~Wind,data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~xlf,layout = c(2,1))
xyplot(y~|f,layout = c(2,1))
xyplot(y~x|f,layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathoffile(plot1.R),local = TRUE)
pathoffile(plot1.R,local = TRUE)
source(plot1.R,local = TRUE)
source(pathtofile(plot1.R),local = TRUE)
source(pathtofile("plot1.R"),local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local = TRUE)
xyplot(price~carat|color*cut,data = diamonds,strip = FALSE,pch = 20,xlab = mylab,ylab = myylab,main = mymain)
xyplot(price~carat|color*cut,data = diamonds,strip = FALSE,pch = 20,xlab = myxlab,ylab = myylab,main = mymain)
xyplot(price~carat|color*cut,data = diamonds,pch = 20,xlab = myxlab,ylab = myylab,main = mymain)
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len = 6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
p1(20)
showMe(p1(20))
showMe(p2(20))
p2(2)
showMe(p2(2))
p1
?name <- function(variables) {
}
?rgb
p3<-colorRampPalette(alpha(0.5))
p3<-colorRampPalette(c("blue","green"),alpha(0.5))
p3<-colorRampPalette(c("blue","green"),alpha = 0.5)
p3(5)
plot(x,y,pch = 19,col = rgb(0,.5,.5)
plot(x,y,pch = 19,col = rgb(0,.5,.5))
plot(x,y,pch = 19,col = rgb(0,.5,.5,.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
pla(20)
paa(20)
pal(20)
showMe(pal(20))
image(volcano)
image(volcano,col = pal(20))
image(volcano,col = pal(20), p1(20))
image(volcano,col = p1(20))
str(mpg)
qplot(displ,hwy,data= mpg)
qplot(displ,hwy,data= mpg,color = drv)
qplot(displ,hwy,data= mpg,color = drv,geom ("point","smooth"))
qplot(displ,hwy,data= mpg,color = drv,geom= c("point","smooth"))
qplot(y = hwy,data = mpg, color = drv)
showMe(myhigh)
myhigh
qplot(drv,hwy,data = mpg,geom = "boxplot")
qplot(drv,hwy,data = mpg,geom = "boxplot",color = manufacturer)
qplot(hwy,data = mpg,drv)
qplot(hwy,data = mpg,fill = drv)
qplot(drv,hwy,data = mpg,facets = ~drv)
qplot(drv,hwy,data = mpg,facets = .~drv)
?facets
qplot(displ,hwy,data = mpg,facets = ~drv)
qplot(displ,hwy,data = mpg,facets = .~drv)
hist(hwy,data = mpg,facets = drv~.,binwidth = 3)
hist(hwy,data = mpg,facets = drv~.,binwidth = 2)
qplot(hwy,data = mpg,facets = drv~.,binwidth = 2)
qplot(displ,hwy,data = mpg,geom = c("point","smooth"),facets =.~drv )
g<-qplot(mpg,aes(displ,hwy))
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
geom_smooth(g+geom_point())
geom_smooth()+g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink",size = 4,alpha = 1/2)+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink",size = 4,alpha = 1/2)
g+geom_point(size = 4,alpha = 1/2,aes())
g+geom_point(size = 4,alpha = 1/2,aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv,size = 2,alpha = 1/2)) + labs(title="Swirl Rules!")+ geom_smooth(size = 4, line = 3,method = "lm", se= FALSE)
g + geom_point(aes(color = drv,size = 2,alpha = 1/2)) + labs(title="Swirl Rules!")+ geom_smooth(size = 4, linetype = 3,method = "lm", se= FALSE)
g + geom_point(aes(color = drv),size = 2,alpha = 1/2) + labs(title="Swirl Rules!")+ geom_smooth(size = 4, linetype = 3,method = "lm", se= FALSE)
g + geom_point(aes(color = drv),size = 2,alpha = 1/2) geom_smooth(size = 4, linetype = 3,method = "lm", se= FALSE)
g + geom_point(aes(color = drv),size = 2,alpha = 1/2)+ geom_smooth(size = 4, linetype = 3,method = "lm", se= FALSE)
nxt()
play()
nxt()
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
use warnings()
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy))+geom_line()
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line(aes(ylim(-3,3))
g+geom_line(aes(ylim(-3,3)))
g+geom_line()+ylim(-3,3)
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
source("best.R")
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
best<-function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
setwd()
setwd()
setwd(dir)
getwd()
setwd("C:/Users/manoj kumar/Desktop/training/R programming")
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart failure")
best("TX", "heart attack")
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best<-function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
min_val <- min(oi, na.rm = FALSE)
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
min_val <- min(oi, na.rm = TRUE)
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("NY", "hert attack")
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("TX", "heart attck")
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
best("TX", "heart attck")
best("TX", "heart failure")
source('C:/Users/manoj kumar/Desktop/training/R programming/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
source('C:/Users/manoj kumar/Desktop/training/R programming/rankall.R')
head(rankall("heart attack", 20), 10)
source(rankall.R)
source(rankall.R)
source('C:/Users/manoj kumar/Desktop/training/R programming/rankall.R')
source('C:/Users/manoj kumar/Desktop/training/R programming/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
source('C:/Users/manoj kumar/Desktop/training/R programming/rankall.R')
head(rankall("heart attack", 20), 10)
source('C:/Users/manoj kumar/Desktop/training/R programming/rankhospital.R')
source('C:/Users/manoj kumar/Desktop/training/R programming/best.R')
rankhospital("TX", "heart failure", 4)
